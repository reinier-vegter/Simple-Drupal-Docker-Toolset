{
  "name": "Simple Drupal Docker Toolset",
  "tagline": "Drupal development toolset, quick, easy, no complex configs.",
  "body": "## Drupal development toolkit based on Docker\r\n\r\nVisit at Github Pages: http://reinier-vegter.github.io/Simple-Drupal-Docker-Toolset/\r\n\r\nWith this toolset, you can install docker and easily fire up any existing Drupal (or php) webroot in 2 seconds.\r\n - drupal 6,7,8 (or basically any PHP app by disabling the drupal check, NO_DRUPAL_CHECK=1)\r\n - SSL support\r\n - PHP 5.4, 5.6 (default), 7.0\r\n - Apache 2.2\r\n - one MySQL container for all projects (data saved in your local home-folder).\r\n - one Drupal container + hostname per project\r\n - Solr 4 container for each project, data storage in project folder, and auto-using of search_api_solr config files.\r\n - mailsink that collects al emails sent through sendmail (/tmp/d7-docker-mailsink on host)\r\n - varnish out-of-the-box (See 'CUSTOM PROJECT CONFIGURATION')\r\n - memcache\r\n - custom mounts, dns entries, solr-config, local hostnames\r\n - XHProf / XHGui\r\n\r\n\r\n***\r\n\r\n### Credits\r\nSimple Drupal Docker Toolset is sponsored and supported by [Finalist B.V.](http://www.finalist.nl/)\r\n\r\n\r\n***\r\n\r\n### INSTALLATION\r\n\r\n#### Get this toolset first\r\nClone git repository somewehere in local folder, or download archive package, and unpack.\r\n\r\n    git clone https://github.com/reinier-vegter/Simple-Drupal-Docker-Toolset.git ~/docker-drupal\r\n\r\n\r\n\r\n#### GNU/Linux distro:\r\n - Install docker:\r\n   - `curl -sSL https://get.docker.com/ | sh`\r\n - Add yourself to docker group:\r\n   - `sudo usermod -aG docker [YOUR USER]`\r\n - Then, logout your system and login again\r\n - Run `bin/install.sh` to symlink all needed scripts to your bin folder.\r\n - Give write access to yourself on hosts file:\r\n   - `sudo chown root:$(whoami) /etc/hosts`\r\n   - `sudo chmod 664 /etc/hosts`\r\n\r\n\r\n#### OSX\r\nFrom: https://docs.docker.com/installation/mac/\r\n- Install toolbox from https://www.docker.com/toolbox\r\n- Open Docker Quickstart Terminal and close when finished\r\n- Open VirtualBox and assign more CPU's to the 'default' VM, as it will be quite slow by default (only 1 CPU)\r\n- Add your user to 'wheel' group, in terminal (so the toolset can add hostname-entries to your hosts file):\r\n  - `sudo dseditgroup -o edit -a $(whoami) -t user wheel`\r\n- Give wheel-group write access to hosts file, in terminal:\r\n  - `sudo chmod 664 /etc/hosts`\r\n- Run the following command to symlink all needed scripts to your bin folder.\r\n  - `sudo bin/install.sh`\r\n\r\n\r\n### UPDATE TOOLSET\r\n  Do a git pull to fetch the latest master-branch for this toolset.\r\n  Then, run `bin/install.sh` again.\r\n\r\n\r\n***\r\n\r\n### AVAILABLE COMMANDS\r\n\r\n        - d7-start                        : start drupal 7 container from project folder\r\n        - d7-stop                         : stop container for 'this' project\r\n        - d7-mysql-start                  : start mysql container (triggered by d7-start)\r\n        - d7-mysql-stop                   : stop mysql container\r\n        - d7-solr4-start                  : start solr4 container (triggered by d7-start)\r\n        - d7-solr4-stop                   : stop solr4 container\r\n        - d7-status                       : shows all docker containers (running and stopped)\r\n        - d7-stop-all                     : stops all drupal toolset related containers\r\n        - d7-update-images                : Will pull updated images from repository.\r\n                                            You should run this every once in a while.\r\n        - d7-cleanup                      : Cleanup (stop + remove) all drupal 7 containers.\r\n                                            They are disposable, and usually removed immediately\r\n                                            when you stop a d7 container.\r\n        - d7-logs [num|all]               : Tail all apache logs.\r\n                                            Argument sets number of lines to print, before following.\r\n                                              (Should be integer, or 'all')\r\n                                            Starts 'docker logs --tail=[num] -f [container]'\r\n        - d7-ssh [container (optional)]   : Open shell (bash) in container. Defaults to container in current webroot folder.\r\n        - d7-drush [drush arguments]      : This runs drush with supplied arguments, in the webroot, as web user.\r\n                                            You can alias this if you'd make this transparent on your system, by adding\r\n                                            alias drush=\"d7-drush\"   to your .bashrc file (~/.bashrc).\r\n        - d7-help                         : Show README\r\n\r\n\r\n### Commands for toolset development\r\n\r\n        - d7-build-docker-image           : Build / rebuild docker images. This replaces images that are downloaded from dockerhub.\r\n\r\n\r\n***\r\n\r\n### QUICK START\r\n\r\nTo start your project, go to the project folder, and run 'd7-start'\r\nNote that settings.php must contain the mysql-host 'mysql-docker.dev',\r\nand that solr is reachable at localhost:8983 from each drupal container.\r\n\r\nBuilding docker images is done the first time you use them (\"d7-start\"), and can take a while.\r\n\r\n\r\n### Common hostnames\r\n - mysql-docker.dev                :  Location of mysql server, reachable from host and container\r\n - dockerhost                      :  Location of your laptop / server. Reachable from container.\r\n                                      To make it reachable from your laptop/server,\r\n                                      just add '127.0.0.1 dockerhost' to /etc/hosts .\r\n\r\n\r\n***\r\n\r\n### CUSTOM PROJECT CONFIGURATION\r\nCustom docker stuff per project:\r\nAdd file .d7-docker.conf to your project folder.\r\n\r\n**Be aware that any bash code in this file is actually executed**\r\n\r\nExample content of file:\r\n\r\n        # Add dependency container.\r\n        # Format: [container name]:[start-script/command]\r\n        # CUST_DEPENDENCIES=(\r\n        #   \"docker.mysql:${mydir}/d7-mysql-start.sh\"\r\n        #   \"docker.solr4:${mydir}/d7-solr4-start.sh\"\r\n        # )\r\n        #\r\n        # Add custom link between containers.\r\n        # Format: [dependency container name]:[hostname in 'this' container, mapped to dependency]\r\n        # CUST_LINK=(\r\n        #   \"docker.mysql:mysql-docker.dev\"\r\n        #   \"docker.solr4:solr4-docker.dev\"\r\n        # )\r\n        #\r\n        # Mount extra volumes in container.\r\n        # Format: [local folder]:[folder in container]\r\n        # CUST_VOL=\"/opt/simplesamlphp:/opt/simplesamlphp1\"\r\n        #\r\n        # Give container extra hostnames.\r\n        # CUST_HOSTNAMES=(\r\n        #   \"dev.my-favorite-hostname.com\"\r\n        # )\r\n        #\r\n        # Provide DNS (hosts-file) entries to container, so container can resolve it.\r\n        # For example usefull if you're having trouble to get docker to communicate through host-system VPN.\r\n        # CUST_DNS=(\r\n        #    www.google-dns.com:8.8.4.4\r\n        # )\r\n        #\r\n        # Do not check if this is actually Drupal. Usable for 'other' php apps to be ran in\r\n        # a D7 container.\r\n        # NO_DRUPAL_CHECK=1\r\n        #\r\n        # Enable Varnish cache engine\r\n        # VARNISH_ENABLE=1\r\n        # Note: This will run Varnish on port 80 (so Drupal can talk to varnish on 127.0.0.1:80)\r\n        # and Apache on port 90.\r\n        # Note: To purge a page, let Drupal call URL's on varnish with the PURGE-method (like GET, but\r\n        # make it PURGE...). The purge and expire modules are a very useful combination to do this.\r\n        #\r\n        # Enable memcache daemon\r\n        # MEMCACHED_ENABLE=1\r\n        #\r\n        # Enable XHGui\r\n        # XHGUI_ENABLE=1\r\n        #\r\n        # Set PHP version to use\r\n        # PHP_VERSION=5.4\r\n        # Supported versions: 5.4, 5.6, 7.0.\r\n        # Defaults to 5.6\r\n        #\r\n        # Custom location for Solr config files.\r\n        # Note that the toolset finds 'search_api_solr/solr-conf/4.x' automatically.\r\n        # Only use this if you use some other module, or schema files of your own.\r\n        # SOLR_CONF_OVERRIDES='sites/all/modules/contrib/search_api_solr/solr-conf/4.x'\r\n        #\r\n\r\n\r\n\r\n***\r\n\r\n### Use of XDebug\r\n\r\nXDebug is installed in the container.\r\nTo use it with php-storm\r\n - make sure to just enable the listener (no server config needed, defaults work fine) in order to start debugging.\r\n   ![PHPStorm XDebug listener](images/listener.png)\r\n - Generate the bookmarklets at https://www.jetbrains.com/phpstorm/marklets/ , to start/stop the debugger.\r\n\r\nThat's all...\r\n\r\n\r\nTo use XDebug profiler, just add a 'profiler' folder in your project.\r\nIt will generate cachegrind files that you can open with KCacheGrind or any other tool.\r\nSee http://www.xdebug.org/docs/profiler\r\n",
  "google": "UA-54818800-5",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}